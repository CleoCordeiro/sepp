SEPP is SATé-enabled phylogenetic placement, and so is a method for the following problem:

Input: tree T and alignment A for a set of full-length gene sequences, and set X of fragmentary sequences for the same gene
Output: placement of each fragment in X into the tree T, and alignment of each fragment in X to the alignment A.

SEPP operates by using a divide-and-conquer strategy to improve the alignment produced by running HMMER (code by Sean Eddy). It then places each fragment into the user-provided tree using pplacer (code by Erick Matsen). Our study shows that SEPP provides improved accuracy for quickly evolving genes as compared to other methods.

Developers: Tandy Warnow, Nam Nguyen, and Siavash Mirarab

Publication:
S. Mirarab, N. Nguyen, and T. Warnow, SEPP: SATé-enabled phylogenetic placement, To appear, PSB 2012. (PDF).


Instalation:
-------------------------------------
This section details steps for installing and running SEPP. We have rus SEPP on Linux and MAC. If you experience difficulty installing or running the software, please contact one of us (Tandy Warnow, Nam Nguyen, or Siavash Mirarab).

Requirements: Before installing the software you need to make sure the following programs are installed on your machine.

1. Python: Version > 2.6. 
  1.1 Linux: on many linux distributions, it seems you need to have python-dev (or python-devel for Fedora) installed before you can install many commonly-used ptyhon packages, including those biopython and numpy that are used by SEPP.
  1.2 On some releases of MAC, you might need Xcode and command line tools installed on your machine (see common problems section for more info).
2. Java: Version > 1.5


SEPP is distributed as Python source code. Once you have the above requirements installed, do the following. 

3.0 Obtain the latest sepp distribution from git repository 
3.1. Uncompress the distribution file: tar -xzf sepp.<version>.tar.gz
3.2. Go to distribution directory: cd sepp
3.3. Install: run "sudo python setup.py install" 

Common Problems:
-- The last step by default requires root access to the system. If you do not have root access, invoke the setup script as follows: "python setup.py install --prefix=/some/path/on/your/system", where "/some/path/on/your/system" is the path to a directory on your system to which you do have read and write access. If you use the "--prefix" option, you must ensure that the "lib/python2.x/site-packages" subdirectory (where "x" denotes the minor version number of your Python install) of the directory you specify following "--prefix=" is on Python's search path. To add a directory to Python's search path, modify your PYTHONPATH environment variable.

-- SEPP relies on a few external python libraries. The setup.py script tries to download and install all those dependencies. We have observed that in some platforms, automatic installation of those required packages can fail. The following errors are commonly observed. 

---- Linux: Python.h cannot be found. This error is usually because python-dev is not installed. Try installing python-dev (for Debian)  or python-devel (for Fedora), and try again.   

---- Mac: "unable to execute llvm-gcc-4.2: No such file or directory". Refer to: http://stackoverflow.com/q/9398142. In short, you need to install Xcode, and the download "Command line Tools". For a lighter alternative you can try this solution too: http://waqasshabbir.tumblr.com/post/19073648382/llvm-gcc-4-2-exe-error-on-mac-osx-lion-when-building

---- In general, when installation of dependencies (bippython, numpy, or dendropy) fail, you can manually download and install those packages. Suggested download links for these dependencies are listed below. To install any of these packages, download the source distribution from addresses mentioned below, uncompress the archive, go to the uncompressed directory, and run "python setup.py install" (using --prefix if you don't have root access). 
 
Dependencies:
1- DendroPy 3 package.
http://pypi.python.org/pypi/DendroPy/3.11.0

2- NumPy package.
http://pypi.python.org/pypi/numpy/1.6.2

3- Biopython package.
http://pypi.python.org/pypi/biopython/1.60



Running SEPP
---------------------------------------------
To run SEPP, invoke the "run_sepp.py" script from the "bin" subdirectory of the location in which you installed the Python packages. To see options for running the script, using the command 
"python <bin>/run_sepp.py -h"

The general command for running sepp is:

"python <bin>/run_sepp.py -t <tree_file> -a <alignment_file> -f <fragment_file> -r <raxml_info_file> -A <alignment_set_size> -P <placement_set_size> "

SEPP can also be run using a configuration file. Sample configuration files and input files can be found in the folder location sepp-1.0/sample/. Change to that directory to run SEPP on the sample files. To run using command options, run

"python <bin>/run_sepp.py -t test.tree -a test.fasta -f test.fas -r test.RAxML_info -A 250 -P 250"

and to run using a configuration file, run

"python <bin>/run_sepp.py -c sample.config"

WARNING: Don't use same output name within the same output folder, things will get over-written.  

The output of SEPP is a .json file, created according to pplacer format. Please refer to here for more information on the format of the josn file. Also note that pplacer package provides a program called guppy that can read .json files and perform downstream steps such as visualization.
Data


Bugs and Errors
---------------------------------------------
SEPP is under active research development at UTCS by the Warnow Lab (and especially with her PhD students Siavash Mirarab and Nam Nguyen). Please report any errors to Siavash Mirarab (smirarab@gmail.com) and Nam Nguyen (namphuon@cs.utexas.edu).

